node {
    // Get Artifactory server instance, defined in the Artifactory Plugin administration page.
    def server = Artifactory.server "artifactory-pdm"
    // Create an Artifactory Maven instance.
    def rtMaven = Artifactory.newMavenBuild()
    def buildInfo
    
    deleteDir()
        
 rtMaven.tool = "mvn"

    stage('Git Checkout') {
        git branch:'PDM', url: 'https://github.com/gunjvm/WebApp.git'
    }

    stage('Sonarqube Scan') {
        withSonarQubeEnv('sonarqube') {
        sh "mvn clean install -Dsonar.test.exclusions=**/test/java/servlet/createpage_junit.java -Dsonar.login=admin -Dsonar.password=admin -Dsonar.tests=. -Dsonar.inclusions=**/test/java/servlet/createpage_junit.java -Dsonar.sources=. sonar:sonar -Dsonar.host.url=http://52.170.46.129:9000/"
        }
    }

    stage('Maven Build') {
        // run build
        buildInfo = rtMaven.run pom: 'pom.xml', goals: 'clean install'
        // notify team on SLACK
        slackSend channel: '#pdm-magk', color: 'good', message: "${env.BUILD_NUMBER} - Build completed: PDM-Pipeline (<${env.BUILD_URL}|Open>)", teamDomain: 'gunjvm', tokenCredentialId: 'slack-jenkins'
    }
    
    stage('Artifactory Publish') {
        // Tool name from Jenkins configuration
        rtMaven.tool = "mvn"
        // Set Artifactory repositories for dependencies resolution and artifacts deployment.
        rtMaven.deployer releaseRepo:'maven-release', snapshotRepo:'maven-snapshot', server: server
       // Publish build
       server.publishBuildInfo buildInfo
    }
    
    stage('Quality - Functional') {
        
        sh "mvn install -f functionaltest/pom.xml"
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '\\functionaltest\\target\\surefire-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])        
    }
    
    stage('Quality - Performance') {
        //blazeMeterTest credentialsId: 'jenkins-blaze', testId: '7895716.taurus', workspaceId: '475891'
	slackSend channel: '#pdm-magk', color: 'good', message: "Blazemeter test completed", teamDomain: 'gunjvm', tokenCredentialId: 'slack-jenkins'
    }
    
    stage('QA deploy') {
        deploy adapters: [tomcat7(credentialsId: 'j-tomcat', path: '', url: 'http://18.222.6.241:8080/')], contextPath: '/PDMQAWebapp', war: '**/*.war'
	// notify team on slack
	slackSend channel: '#pdm-magk', color: 'good', message: "${env.BUILD_NUMBER} - QA deploy completed http://18.222.6.241:8080/PDMQAWebapp", teamDomain: 'gunjvm', tokenCredentialId: 'slack-jenkins'
    }
        
    stage('PROD deploy') {
            deploy adapters: [tomcat7(credentialsId: 'j-tomcat', path: '', url: 'http://3.14.72.163:8080/')], contextPath: '/PDMPRODWebapp', war: '**/*.war'
    }
    
    stage('Collaboration') {
	//notify team on slack
        slackSend channel: '#pdm-magk', color: 'good', message: "${env.BUILD_NUMBER} - PROD deploy completed http://3.14.72.163:8080/PDMPRODWebapp", teamDomain: 'gunjvm', tokenCredentialId: 'slack-jenkins'
	// update Jira 
	script {
                    JIRA_TICKET = sh (
                        script: 'git --no-pager show -s --format=\'%s\' ${GIT_COMMIT}',
                        returnStdout: true
                        ).trim()
                }
                echo "Jira Ticket Number: ${JIRA_TICKET}"
		//comment jira
                jiraComment body: "PROD deploy completed - Jenkins URL(${env.BUILD_URL}), PROD webapp - http://3.14.72.163:8080/PDMPRODWebapp", issueKey: "${JIRA_TICKET}"
	
    }
}
